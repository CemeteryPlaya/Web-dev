from django.contrib.auth.decorators import login_required
from django.shortcuts import render, redirect
from django.contrib import messages
from django.utils import timezone
from myprofile.models import Extradition, TrackCode, Notification, Receipt


@login_required(login_url='login')
def extradition_view(request):
    
    """–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤—ã–¥–∞—á–∏ –ø–æ—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º).
    –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç—Ä–µ–∫-–∫–æ–¥—ã, —É–∫–∞–∑–∞—Ç—å –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.
    –ü–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è ‚Äî —Ç—Ä–µ–∫–∏ –ø–æ–ª—É—á–∞—é—Ç —Å—Ç–∞—Ç—É—Å 'claimed'."""
    

    if request.method == 'POST':
        track_codes_raw = request.POST.get('track_codes', '').strip()
        pickup_point = request.POST.get('pickup_point', '').strip()
        comment = request.POST.get('comment', '').strip()
        receipt_id = request.POST.get('receipt_id', '').strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏
        if not track_codes_raw or not pickup_point:
            messages.error(request, "–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫-–∫–æ–¥—ã –∏ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏.")
            return redirect('extradition')

        # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –Ω–∞ —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤
        track_codes_list = [line.strip() for line in track_codes_raw.splitlines() if line.strip()]

        # –°–æ–∑–¥–∞—ë–º –≤—ã–¥–∞—á—É
        extradition = Extradition.objects.create(
            user=request.user,
            issued_by=request.user,
            pickup_point=pickup_point,
            comment=comment,
            confirmed=True  # –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ False, –µ—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∑–∂–µ
        )

        # –ü—Ä–∏–≤—è–∑–∫–∞ —á–µ–∫–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
        if receipt_id:
            try:
                receipt = Receipt.objects.get(id=receipt_id)
                extradition.receipt = receipt
                extradition.save()
            except Receipt.DoesNotExist:
                messages.warning(request, f"–ß–µ–∫ —Å ID {receipt_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤
        success, errors = 0, 0
        for code in track_codes_list:
            try:
                track = TrackCode.objects.get(track_code=code)
                extradition.track_codes.add(track)
                track.status = 'claimed'
                track.save()
                success += 1

                # –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É
                Notification.objects.create(
                    user=track.owner,
                    message=f"üì¶ –í–∞—à —Ç—Ä–µ–∫ {track.track_code} –≤—ã–¥–∞–Ω –≤ –ø—É–Ω–∫—Ç–µ: {pickup_point}"
                )

            except TrackCode.DoesNotExist:
                errors += 1
                messages.warning(request, f"‚ùó –¢—Ä–µ–∫-–∫–æ–¥ '{code}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        messages.success(request, f"‚úÖ –í—ã–¥–∞—á–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ ({success} —Ç—Ä–µ–∫–æ–≤, –æ—à–∏–±–æ–∫: {errors}).")
        return redirect('extradition')

    # GET-–∑–∞–ø—Ä–æ—Å ‚Äî –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ñ–æ—Ä–º–æ–π
    return render(request, "extraditions.html", {
        'status_choices': TrackCode.STATUS_CHOICES
    })
