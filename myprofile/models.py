from django.db import models
from django.conf import settings

# Create your models here.
class TrackCode(models.Model):
    STATUS_CHOICES = [
        ('user_added', '–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'),
        ('warehouse_cn', '–ü—Ä–∏–Ω—è—Ç–æ –Ω–∞ —Å–∫–ª–∞–¥ (–ö–∏—Ç–∞–π)'),
        ('shipped_cn', '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ —Å–∫–ª–∞–¥–∞ (–ö–∏—Ç–∞–π)'),
        ('delivered', '–ü—Ä–∏–Ω—è—Ç–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–º —Ü–µ–Ω—Ç—Ä–æ–º'),
        ('ready', '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –ü–í–ó'),
        ('claimed', '–í—ã–¥–∞–Ω–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—é'),
    ]

    id = models.AutoField(primary_key=True, verbose_name="‚Ññ —Ç—Ä–µ–∫ –∫–æ–¥–∞")
    track_code = models.CharField(max_length=100, unique=True, verbose_name="–¢—Ä–µ–∫ –∫–æ–¥")
    update_date = models.DateField(auto_now=True, verbose_name="–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, verbose_name="–°—Ç–∞—Ç—É—Å —Ç—Ä–µ–∫-–∫–æ–¥–∞")
    owner = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        verbose_name="–ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞"
    )
    description = models.CharField(max_length=255, blank=True, verbose_name="–û –ø–æ—Å—ã–ª–∫–µ")
    weight = models.DecimalField(max_digits=6, decimal_places=3, null=True, blank=True, verbose_name="–í–µ—Å –ø–æ—Å—ã–ª–∫–∏ (–∫–≥)")

    def __str__(self):
        return f"{self.track_code} - {self.get_status_display()}"
    
class Receipt(models.Model):
    owner = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, verbose_name="–í–ª–∞–¥–µ–ª–µ—Ü")
    created_at = models.DateField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    is_paid = models.BooleanField(default=False, verbose_name="–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã")
    total_weight = models.DecimalField(max_digits=6, decimal_places=3, default=0, verbose_name="–û–±—â–∏–π –≤–µ—Å (–∫–≥)")
    total_price = models.DecimalField(max_digits=10, decimal_places=0, default=0, verbose_name="–°—É–º–º–∞ —á–µ–∫–∞")
    
    # üè¨ –ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏
    pickup_point = models.CharField(max_length=255, blank=True, null=True, verbose_name="–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏")
    
    # üí≥ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—É–Ω–∫—Ç–∞)
    payment_link = models.URLField(blank=True, null=True, verbose_name="–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É")

    def __str__(self):
        return f"–ß–µ–∫ #{self.id} –æ—Ç {self.created_at} ‚Äî {'–û–ø–ª–∞—á–µ–Ω' if self.is_paid else '–ù–µ –æ–ø–ª–∞—á–µ–Ω'}"

class ReceiptItem(models.Model):
    receipt = models.ForeignKey(Receipt, related_name='items', on_delete=models.CASCADE)
    track_code = models.OneToOneField(TrackCode, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.track_code)

class Notification(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name="notifications")
    message = models.CharField(max_length=255, verbose_name="–°–æ–æ–±—â–µ–Ω–∏–µ")
    is_read = models.BooleanField(default=False, verbose_name="–ü—Ä–æ—á–∏—Ç–∞–Ω–æ")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞")

    def __str__(self):
        return f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {self.user.username}: {self.message}"
    
class CustomerDiscount(models.Model):
    """–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∏–ª–∏ —Ä–∞–∑–æ–≤–∞—è —Å–∫–∏–¥–∫–∞ –≤ —Ç–µ–Ω–≥–µ –∑–∞ 1 –∫–≥"""
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name="discounts",
        verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    )
    amount_per_kg = models.DecimalField(
        max_digits=6,
        decimal_places=2,
        verbose_name="–°–∫–∏–¥–∫–∞ (‚Ç∏/–∫–≥)"
    )
    is_temporary = models.BooleanField(default=False, verbose_name="–†–∞–∑–æ–≤–∞—è —Å–∫–∏–¥–∫–∞")
    active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–Ω–∞—è —Å–∫–∏–¥–∫–∞")
    comment = models.CharField(max_length=255, blank=True, verbose_name="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        type_label = "–†–∞–∑–æ–≤–∞—è" if self.is_temporary else "–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è"
        return f"{type_label} —Å–∫–∏–¥–∫–∞ {self.amount_per_kg} ‚Ç∏/–∫–≥ ({self.user.username})"
    
class UserPushSubscription(models.Model):
    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    subscription_data = models.JSONField(default=dict, blank=True, null=True)

class Extradition(models.Model):
    # –ö—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name="extraditions",
        verbose_name="–ü–æ–ª—É—á–∞—Ç–µ–ª—å"
    )

    # –ö–∞–∫–∏–µ –ø–æ—Å—ã–ª–∫–∏ –≤—ã–¥–∞–Ω—ã (–æ–±—ã—á–Ω–æ –∏–∑ —á–µ–∫–∞)
    receipt = models.ForeignKey(
        'Receipt',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="extraditions",
        verbose_name="–ß–µ–∫"
    )

    # –¢—Ä–µ–∫-–∫–æ–¥—ã, –≤–∫–ª—é—á—ë–Ω–Ω—ã–µ –≤ –≤—ã–¥–∞—á—É
    track_codes = models.ManyToManyField(
        'TrackCode',
        related_name="extraditions",
        verbose_name="–¢—Ä–µ–∫-–∫–æ–¥—ã"
    )

    # –ì–¥–µ –≤—ã–¥–∞–Ω–æ
    pickup_point = models.CharField(
        max_length=255,
        verbose_name="–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏"
    )

    # –ö—Ç–æ –≤—ã–¥–∞–ª (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫/–æ–ø–µ—Ä–∞—Ç–æ—Ä)
    issued_by = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="issued_extraditions",
        verbose_name="–°–æ—Ç—Ä—É–¥–Ω–∏–∫, –≤—ã–¥–∞–≤—à–∏–π –ø–æ—Å—ã–ª–∫—É"
    )

    # –ü–æ–¥–ø–∏—Å—å –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirmed = models.BooleanField(
        default=False,
        verbose_name="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º"
    )

    # –î–æ–ø. –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    comment = models.TextField(
        blank=True,
        verbose_name="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
    )

    class Meta:
        verbose_name = "–í—ã–¥–∞—á–∞ –ø–æ—Å—ã–ª–∫–∏"
        verbose_name_plural = "–í—ã–¥–∞—á–∏ –ø–æ—Å—ã–ª–æ–∫"
        

    def __str__(self):
        return f"–í—ã–¥–∞—á–∞ #{self.id} ‚Äî {self.user.username} ({self.pickup_point})"

class ExtraditionReceipt(models.Model):
    receipt = models.OneToOneField(
        Receipt,
        on_delete=models.CASCADE,
        related_name='extradition_receipt',
        verbose_name="–ß–µ–∫"
    )
    issued_by = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        null=True,
        verbose_name="–í—ã–¥–∞–ª —Å–æ—Ç—Ä—É–¥–Ω–∏–∫"
    )
    pickup_point = models.CharField(max_length=255, verbose_name="–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏")
    comment = models.CharField(max_length=255, blank=True, null=True, verbose_name="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
    issued_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏")

    def __str__(self):
        return f"–í—ã–¥–∞—á–∞ –ø–æ —á–µ–∫—É #{self.receipt.id}"